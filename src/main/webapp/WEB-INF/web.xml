<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <display-name>web2练习项目</display-name>
<!--    <welcome-file-list>
        <welcome-file>/login.html</welcome-file>
    </welcome-file-list>-->
    <!--
        web.xml 的启动顺序
        context-param -> listener -> filter -> servlet
    -->

    <!--context start-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:spring/spring.xml
        </param-value>
    </context-param>

    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>600000</param-value>
    </context-param>

    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>webPath</param-value>
    </context-param>
    <!--context end-->

    <!--listener start-->
    <!--找到对应的webAppRootKey 值作为web上下文-->
    <listener>
        <listener-class>org.springframework.web.util.WebAppRootListener</listener-class>
    </listener>

    <!--spring mvc-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!--listener end-->

    <!--filter start-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 可以把Post请求转变为put和delete请求 -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
        配置Shiro过滤器,先让Shiro过滤系统接收到的请求
        这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/>
        使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤
        通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的
    -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--filter end-->

    <!--servlet start-->
    <!--spring-->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>
            org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <!--Spring默认配置文件为“/WEB-INF/[servlet名字]-servlet.xml”-->
        <!-- 备注：可以拦截三种请求 第一种：拦截固定后缀的url，比如设置为 *.do、*.action， 例如：/user/add.action 此方法最简单,不会导致静态资源（jpg,js,css）被拦截.
                                 第二种：拦截所有,设置为/，例如：/user/add /user/add.action此方法可以实现REST风格的url, 很多互联网类型的应用使用这种方式.但是此方法会导致静态文件(jpg,js,css)被拦截后不能正常显示.需要特殊处理.
                                 第三种：拦截所有,设置为/*，此设置方法错误,因为请求到Action,当action转到jsp时再次被拦截,提示不能根据jsp路径mapping成功.
        -->
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--druid-->
    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>

    <!-- 验证码start (暂时没用到)-->
    <servlet>
        <servlet-name>yzm</servlet-name>
        <servlet-class>util.YzmServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>yzm</servlet-name>
        <url-pattern>/servlet/yzm</url-pattern>
    </servlet-mapping>
    <!-- 验证码end -->
    <!--servlet end-->

    <!--错误页面-->
    <error-page>
        <error-code>404</error-code>
        <location>/common/404.html</location>
    </error-page>
</web-app>
