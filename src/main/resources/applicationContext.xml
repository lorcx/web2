<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 读取jdbc.properties文件信息,方便更改数据库 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:dataSource.properties</value>
				<value>classpath:hibnate.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<!-- 数据源 begin -->

    <!-- 1.dbcp 数据源 -->
	<!--
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${url}"></property>
		<property name="username" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>
	-->

	<!-- 2.druid数据源 -->
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${initialSize}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxActive" value="${maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${filters}" />
	</bean>
	<!-- 数据源 end -->

	<!--hibernate配置 begin-->

	<!--1.hibernate模板-->
	<bean id ="hibernateTemplate" class ="org.springframework.orm.hibernate3.HibernateTemplate" scope ="singleton">
		<property name ="sessionFactory" ref ="sessionFactory" />
	</bean>

	<!--2.session工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- hibernate配置文件 -->
		<property name="hibernateProperties">
			<props>
				<!--方言-->
				<prop key="hibernate.dialect">${dialect}</prop>
				<!--显示sql-->
				<prop key="hibernate.show_sql">${show_sql}</prop>
				<!--格式化sql-->
				<prop key="hibernate.format_sql">${format_sql}</prop>

				<prop key="hibernate.current_session_context_class">${thread}</prop>

				<prop key="hibernate.transaction.factory_class">${transaction}</prop>
			</props>
		</property>
		<property name="mappingResources">
			<list>
				<value>module/test/entity/Test.hbm.xml</value>
				<value>module/tree/entity/SsfFaLocation.hbm.xml</value>
				<value>module/base/user/entity/BaseUser.hbm.xml</value>
			</list>
		</property>
	</bean>

	<!-- 3.事物管理 -->
	<!-- 配置事务管理器 指定其作用的sessionFactory把事务交给Spring去处理 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- 配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="*" read-only="true"/>
			<tx:method name="doGet*" propagation="REQUIRED"/>
			<!--test-->
			<tx:method name="test" propagation="REQUIRED"/>
			<tx:method name="upload*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 那些类的哪些方法参与事务 -->
	<aop:config>
		<aop:pointcut id="allServiceMethod" expression="(execution(* module.*.service..*.*(..)) or
														 execution(* module.base.*.service.*.*(..))
														 )"/> <!--没切上 只切的到了一个类  execution(* util..*.*(..))	-->
		<aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice"/>
	</aop:config>


	<!--hibernate配置 end-->

	<!--spring 文件begin-->
	<import resource="classpath:spring/applicationContext_base.xml"></import>
	<import resource="classpath:spring/applicationContext_common.xml"></import>
	<import resource="classpath:spring/applicationContext_test.xml"></import>
	<import resource="classpath:spring/applicationContext_zTree.xml"></import>
	<import resource="classpath:spring/applicationContext_login.xml"></import>
	<!--spring 文件end-->
</beans>
